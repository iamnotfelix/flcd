(*program = { declarations | statements }

declarations = declaration | list_declaration
declaration = type " " variable{","variable}";"
list_declaration = "list" " " type "[" NUMBER_CONSTANT "]" IDENTIFIER";"
variable = IDENTIFIER["="CONSTANT]{","IDENTIFIER["="CONSTANT]}
type = "int" | "char" | "bool" | "string"

statements = { assign_statement | list_assign_statement | io_statement |}
assign_statement = IDENTIFIER "=" expression";"
list_assign_statement = IDENTIFIER"[" NUMBER_CONSTANT "]" "=" expression";"
expression = expression "+" term | term
term = term "*" factor | factor
*)

program ::= decllist cmpdstmt

decllist ::= declaration ";" | declaration ";" decllist
declaration ::= type " " IDENTIFIER
type1 ::= "int" | "float" | "char" | "string" | "bool"
arraydecl ::= type1 "list" "[" nr "]"
type  ::= type1 | arraydecl

cmpdstmt ::= "{" stmtlist "}"
stmtlist ::= stmt ";" | stmt ";" stmtlist
stmt ::= simplstmt | structstmt
simplstmt ::= assignstmt | iostmt

assignstmt ::= IDENTIFIER "=" expression
expression ::= expression "+" term | term
term ::= term "*" factor | factor

factor ::= "(" expression ")" | IDENTIFIER
iostmt ::= "input" | "print" "(" IDENTIFIER ")"
structstmt ::= cmpdstmt | ifstmt | forstmt
ifstmt ::= "if" condition "else" stmt ["ELSE" stmt]
forstmt ::= "for" "(" declaration assignstmt "in" IDENTIFIER ")" "{" stmt "}"
condition ::= expression RELATION expression
RELATION ::= "<" | "<=" | "==" | "!=" | ">=" | ">"